/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import Fachkonzept.Interpreter;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author user
 */
public class Editor extends javax.swing.JFrame {
    private Interpreter inter;
    /**
     * Creates new form Editor
     */
    public Editor() {
        initComponents();
        inter = new Interpreter();
        
        showCells();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        taEditor = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        taOutput = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        taCells = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menSave = new javax.swing.JMenuItem();
        menLoad = new javax.swing.JMenuItem();
        menExecuteCurr = new javax.swing.JMenuItem();
        menQuit = new javax.swing.JMenuItem();
        menHelp = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        taEditor.setColumns(20);
        taEditor.setRows(5);
        jScrollPane1.setViewportView(taEditor);

        jLabel1.setText("Output:");

        taOutput.setColumns(20);
        taOutput.setRows(5);
        jScrollPane2.setViewportView(taOutput);

        jLabel2.setText("Value-Cells:");

        jLabel3.setText("Program:");

        taCells.setColumns(20);
        taCells.setRows(5);
        jScrollPane3.setViewportView(taCells);

        jMenu1.setText("File");

        menSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menSave.setText("Save");
        menSave.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                menSaveMousePressed(evt);
            }
        });
        jMenu1.add(menSave);

        menLoad.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menLoad.setText("Load");
        menLoad.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                menLoadMousePressed(evt);
            }
        });
        jMenu1.add(menLoad);

        menExecuteCurr.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menExecuteCurr.setText("Execute");
        menExecuteCurr.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                menExecuteCurrMousePressed(evt);
            }
        });
        jMenu1.add(menExecuteCurr);

        menQuit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menQuit.setText("Quit");
        menQuit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                menQuitMousePressed(evt);
            }
        });
        jMenu1.add(menQuit);

        jMenuBar1.add(jMenu1);

        menHelp.setText("?");
        menHelp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                menHelpMousePressed(evt);
            }
        });
        jMenuBar1.add(menHelp);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE))
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menQuitMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menQuitMousePressed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_menQuitMousePressed

    private void menSaveMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menSaveMousePressed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        // Dialog zum Oeffnen von Dateien anzeigen
        int rueckgabeWert = chooser.showOpenDialog(null);
        
        /* Abfrage, ob auf "Öffnen" geklickt wurde */
        if(rueckgabeWert == JFileChooser.APPROVE_OPTION)
        {
             // Ausgabe der ausgewaehlten Datei
            String path = chooser.getSelectedFile().getAbsolutePath();
        }
    }//GEN-LAST:event_menSaveMousePressed

    private void menLoadMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menLoadMousePressed
        // TODO add your handling code here:
        this.taEditor.setText("");
        this.taOutput.setText("");
        inter.reset();
        showCells();
        JFileChooser chooser = new JFileChooser();
        // Dialog zum Oeffnen von Dateien anzeigen
        int rueckgabeWert = chooser.showOpenDialog(null);
        
        /* Abfrage, ob auf "Öffnen" geklickt wurde */
        if(rueckgabeWert == JFileChooser.APPROVE_OPTION)
        {
             // Ausgabe der ausgewaehlten Datei
            //String path = chooser.getSelectedFile().getAbsolutePath().replace(".txt", ".bf");
            String path = chooser.getSelectedFile().getAbsolutePath();
            
            String output = "";
            try
            {
                // Open the file
                FileInputStream fstream = new FileInputStream(path);            
                BufferedReader br = new BufferedReader(new InputStreamReader(fstream));

                String strLine;
                //Read File Line By Line
                while ((strLine = br.readLine()) != null)   {
                    taEditor.append(strLine + "\n");
                }
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(null,ex.getMessage(),"Error",JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null,ex.getMessage(),"Error",JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_menLoadMousePressed

    private void menHelpMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menHelpMousePressed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_menHelpMousePressed

    private void menExecuteCurrMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menExecuteCurrMousePressed
        // TODO add your handling code here:     
        inter.reset();
        String[] prog = this.taEditor.getText().split("\n");
        
        for (int i = 0; i < prog.length; i++) {
            if(prog[i].equals("0B"))
            {
                prog[i] = "00 " + JOptionPane.showInputDialog("your input:");
            }
            else if(prog[i].startsWith("#"))
            {
                prog[i] = "";                
            }
        }
        
        String [] rueck = inter.execute(prog);
        
        for (int i = 0; i < rueck.length; i++) {
            /*if(rueck[0].equals("input"))
            {
                String m = JOptionPane.showInputDialog("your input:");
                String[] safeInput = new String[1];
                safeInput[0] = "00 " + m;
                String[] r = inter.execute(safeInput);
            }
            else*/
            {
                if(rueck[i] != null)
                    taOutput.append(rueck[i]);
            }
        }        
        showCells();
    }//GEN-LAST:event_menExecuteCurrMousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Editor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JMenuItem menExecuteCurr;
    private javax.swing.JMenu menHelp;
    private javax.swing.JMenuItem menLoad;
    private javax.swing.JMenuItem menQuit;
    private javax.swing.JMenuItem menSave;
    private javax.swing.JTextArea taCells;
    private javax.swing.JTextArea taEditor;
    private javax.swing.JTextArea taOutput;
    // End of variables declaration//GEN-END:variables

    public void readCode(String path)
    {
        String output = "";
        int zaehler = 0;
        String[] code = new String[50000];
        try
        {
            // Open the file
            FileInputStream fstream = new FileInputStream(path);
            BufferedReader br = new BufferedReader(new InputStreamReader(fstream));

            String strLine;
            //Read File Line By Line
            if ((strLine = br.readLine()) != null)   {
                code[zaehler] = strLine;
            }
            Interpreter interpreter = new Interpreter();
            String[] rueck = interpreter.execute(code);
            
            for (int i = 0; i < rueck.length; i++) {
                taOutput.append(rueck[i]);
            }  
        }
        catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(null,e.getMessage(),"Error",JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException ex) {
            Logger.getLogger(Interpreter.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void showCells()
    {
        byte[] cells = inter.returnCells();
        taCells.setText("");
        for (int i = 0; i < cells.length; i++) {
            taCells.append("cell: " + cells[i]+"\n");
        }
    }
}
